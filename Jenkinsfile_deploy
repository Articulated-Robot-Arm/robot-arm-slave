node {
    def imageName = 'dev-image'
    def imageTag = 'latest'
    def imageId

    stage('Check & Build Docker Image') {
        def imageExists = sh(
            script: "docker images -q ${imageName}:${imageTag}",
            returnStdout: true
        ).trim()

        if (imageExists) {
            echo "Image ${imageName}:${imageTag} already exists. Skipping build."
            imageId = imageName + ":" + imageTag
        } else {
            echo "Building image ${imageName}:${imageTag}..."
            def builtImage = docker.build(imageName, 'src')
            imageId = builtImage.id
        }
    }
    docker.image(imageId).inside(
        "--volume=${env.WORKSPACE}:/workspace " +
        "--volume=/var/run/docker.sock:/var/run/docker.sock"
    ) {
        try {
            stage('System Information for Debugging') {
                echo "Gathering system information..."
                sh '''
                    set -e
                    sudo apt update && apt install -y arp-scan net-tools
                    sudo arp-scan --interface=enp36s0 --localnet
                    ifconfig
                '''
            }

            stage('Apply updates to slaves') {
                echo "Applying updates to slaves..."
                sh './scripts/mc-deploy.sh'
            }

            stage('Teardown') {
                echo "Cleaning up..."
                sh 'echo Cleaning workspace'
            }
        } finally {
            echo "Pipeline completed."
        }
    }
}
