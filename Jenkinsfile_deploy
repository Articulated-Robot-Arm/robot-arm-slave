properties([
    parameters([
        choice(
            name: 'PLAYBOOK_NAME',
            choices: ['playbook-deploy.yaml', 'playbook-stop.yaml'],
            description: 'Select which Ansible playbook to run'
        )
    ])
])

node {

    stage('Ensure we have newest git repo changes') {
        sh """
            git fetch --all
            git checkout main
            git pull
        """
    }


    def imageName = 'dev-image'
    def imageTag = 'latest'
    def imageId

    stage('Check & Build Docker Image') {
        def imageExists = sh(
            script: "docker images -q ${imageName}:${imageTag}",
            returnStdout: true
        ).trim()

        if (imageExists) {
            echo "Image ${imageName}:${imageTag} already exists. Skipping build."
            imageId = "${imageName}:${imageTag}"
        } else {
            echo "Building image ${imageName}:${imageTag}..."
            def builtImage = docker.build(imageName, "-f src/Dockerfile-dev .")
            imageId = "${imageName}:${imageTag}"
        }
    }

    docker.image(imageId).inside(
        "--privileged " +
        "--network=host " +
        "--volume=${env.WORKSPACE}:/workspace " +
        "--volume=/var/run/docker.sock:/var/run/docker.sock " +
        "--volume=/tmp/.X11-unix:/tmp/.X11-unix:cached " +
        "--volume=/dev/dri:/dev/dri:cached"
    ) {
        try {
            stage('System Information for Debugging') {
                echo "Gathering system information..."
                sh '''
                    set -e
                    sudo apt update && sudo apt install -y arp-scan net-tools
                    sudo arp-scan --interface=enp36s0 --localnet || echo "arp-scan may have failed"
                    ifconfig
                '''
            }
            withCredentials([sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                withEnv(['ANSIBLE_HOST_KEY_CHECKING=False']) {
                    stage('Apply updates to slaves') {
                        sh """
                            echo 'Applying updates to slaves...'
                            mkdir -p tmp
                            echo '[myhosts]' > tmp/inventory.ini
                            sudo scripts/extract_slave_ips.sh >> tmp/inventory.ini
                            cat tmp/inventory.ini
                            ansible-inventory -i tmp/inventory.ini --list
                            ansible myhosts -m ping -i tmp/inventory.ini \
                              --user=$SSH_USER \
                              --private-key=$SSH_KEY
                            ansible-playbook -i tmp/inventory.ini scripts/${params.PLAYBOOK_NAME} \
                              --user=$SSH_USER \
                              --private-key=$SSH_KEY
                            """
                    }
                }
            }

            stage('Teardown') {
                echo "Cleaning up..."
                sh 'echo Cleaning workspace'
            }
        } finally {
            echo "Pipeline completed."
        }
    }
}