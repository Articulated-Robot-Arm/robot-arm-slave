node {

    stage('Ensure we have newest git repo changes') {
        sh """
            git fetch --all
            git checkout main
        """
    }


    def imageName = 'dev-image'
    def imageTag = 'latest'
    def imageId

    stage('Check & Build Docker Image') {
        def imageExists = sh(
            script: "docker images -q ${imageName}:${imageTag}",
            returnStdout: true
        ).trim()

        if (imageExists) {
            echo "Image ${imageName}:${imageTag} already exists. Skipping build."
            imageId = "${imageName}:${imageTag}"
        } else {
            echo "Building image ${imageName}:${imageTag}..."
            sh "pwd"
            sh "ls -alh ./src/"
            def builtImage = docker.build(imageName, "-f src/Dockerfile_dev .")
            imageId = builtImage.imageName
        }
    }

    docker.image(imageId).inside(
        "--privileged " +
        "--network=host " +
        "--volume=${env.WORKSPACE}:/workspace " +
        "--volume=/var/run/docker.sock:/var/run/docker.sock " +
        "--volume=/tmp/.X11-unix:/tmp/.X11-unix:cached " +
        "--volume=/dev/dri:/dev/dri:cached"
    ) {
        try {
            stage('System Information for Debugging') {
                echo "Gathering system information..."
                sh '''
                    set -e
                    sudo apt update && sudo apt install -y arp-scan net-tools
                    sudo arp-scan --interface=enp36s0 --localnet || echo "arp-scan may have failed"
                    ifconfig
                '''
            }

            stage('Apply updates to slaves') {
                echo "Applying updates to slaves..."
                sh './scripts/mc-deploy.sh'
            }

            stage('Teardown') {
                echo "Cleaning up..."
                sh 'echo Cleaning workspace'
            }
        } finally {
            echo "Pipeline completed."
        }
    }
}